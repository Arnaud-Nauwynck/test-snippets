/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { FooRequest } from '../model/fooRequest';
import { FooResponse } from '../model/fooResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class FooService {

    protected basePath = 'http://localhost:4200';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * getFoo
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFooUsingGET(observe?: 'body', reportProgress?: boolean): Observable<FooResponse>;
    public getFooUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FooResponse>>;
    public getFooUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FooResponse>>;
    public getFooUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<FooResponse>(`${this.basePath}/api/v1/foo/getFoo`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getFoos
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFoosUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<FooResponse>>;
    public getFoosUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<FooResponse>>>;
    public getFoosUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<FooResponse>>>;
    public getFoosUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<FooResponse>>(`${this.basePath}/api/v1/foo/getFoos`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getJsonCharArray
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getJsonCharArrayUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
    public getJsonCharArrayUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
    public getJsonCharArrayUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
    public getJsonCharArrayUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<string>>(`${this.basePath}/api/v1/foo/getJsonCharArray`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getJsonText2
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getJsonText2UsingGET(observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getJsonText2UsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getJsonText2UsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getJsonText2UsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get/*<string>*/(`${this.basePath}/api/v1/foo/getJsonText2`,
            {
                responseType: 'text',
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getJsonText3
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getJsonText3UsingGET(observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getJsonText3UsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getJsonText3UsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getJsonText3UsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get/*<string>*/(`${this.basePath}/api/v1/foo/getJsonText3`,
            {
                responseType: 'text',
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getJsonText
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getJsonTextUsingGET(observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getJsonTextUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getJsonTextUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getJsonTextUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/api/v1/foo/getJsonText`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getText2
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getText2UsingGET(observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getText2UsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getText2UsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getText2UsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'plain/text'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get/*<string>*/(`${this.basePath}/api/v1/foo/getText2`,
            {
                responseType: 'text',
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getText3
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getText3UsingGET(observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getText3UsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getText3UsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getText3UsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get/*<string>*/(`${this.basePath}/api/v1/foo/getText3`,
            {
                responseType: 'text',
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getText
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTextUsingGET(observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getTextUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getTextUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getTextUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'plain/text'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get/*<string>*/(`${this.basePath}/api/v1/foo/getText`,
            {
                responseType: 'text',
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * postFoo
     * 
     * @param req req
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postFooUsingPOST(req: FooRequest, observe?: 'body', reportProgress?: boolean): Observable<FooResponse>;
    public postFooUsingPOST(req: FooRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FooResponse>>;
    public postFooUsingPOST(req: FooRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FooResponse>>;
    public postFooUsingPOST(req: FooRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (req === null || req === undefined) {
            throw new Error('Required parameter req was null or undefined when calling postFooUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<FooResponse>(`${this.basePath}/api/v1/foo/postFoo`,
            req,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * putFoo
     * 
     * @param req req
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putFooUsingPUT(req: FooRequest, observe?: 'body', reportProgress?: boolean): Observable<FooResponse>;
    public putFooUsingPUT(req: FooRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FooResponse>>;
    public putFooUsingPUT(req: FooRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FooResponse>>;
    public putFooUsingPUT(req: FooRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (req === null || req === undefined) {
            throw new Error('Required parameter req was null or undefined when calling putFooUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<FooResponse>(`${this.basePath}/api/v1/foo/putFoo`,
            req,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
