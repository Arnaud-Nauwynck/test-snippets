/**
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AddressDTO } from '../model/addressDTO';
import { BalSummaryDTO } from '../model/balSummaryDTO';
import { CityDTO } from '../model/cityDTO';
import { CityLightDTO } from '../model/cityLightDTO';
import { CityStreetLightDTO } from '../model/cityStreetLightDTO';
import { FirstnameDTO } from '../model/firstnameDTO';
import { StreetNameDTO } from '../model/streetNameDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class BalRestControllerService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * get addresses
     * 
     * @param limit 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAddresses(limit: number, observe?: 'body', reportProgress?: boolean): Observable<Array<AddressDTO>>;
    public getAddresses(limit: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<AddressDTO>>>;
    public getAddresses(limit: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<AddressDTO>>>;
    public getAddresses(limit: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (limit === null || limit === undefined) {
            throw new Error('Required parameter limit was null or undefined when calling getAddresses.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<AddressDTO>>('get',`${this.basePath}/api/v1/bal/addresses`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get addresses, range [from,to(
     * 
     * @param from 
     * @param to 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAddressesRange(from: number, to: number, observe?: 'body', reportProgress?: boolean): Observable<Array<AddressDTO>>;
    public getAddressesRange(from: number, to: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<AddressDTO>>>;
    public getAddressesRange(from: number, to: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<AddressDTO>>>;
    public getAddressesRange(from: number, to: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (from === null || from === undefined) {
            throw new Error('Required parameter from was null or undefined when calling getAddressesRange.');
        }

        if (to === null || to === undefined) {
            throw new Error('Required parameter to was null or undefined when calling getAddressesRange.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (from !== undefined && from !== null) {
            queryParameters = queryParameters.set('from', <any>from);
        }
        if (to !== undefined && to !== null) {
            queryParameters = queryParameters.set('to', <any>to);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<AddressDTO>>('get',`${this.basePath}/api/v1/bal/addresses-range`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get cities (full info)
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCitiesFull(observe?: 'body', reportProgress?: boolean): Observable<Array<CityDTO>>;
    public getCitiesFull(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CityDTO>>>;
    public getCitiesFull(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CityDTO>>>;
    public getCitiesFull(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<CityDTO>>('get',`${this.basePath}/api/v1/bal/cities-full`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get cities
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCitiesLight(observe?: 'body', reportProgress?: boolean): Observable<Array<CityLightDTO>>;
    public getCitiesLight(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CityLightDTO>>>;
    public getCitiesLight(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CityLightDTO>>>;
    public getCitiesLight(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<CityLightDTO>>('get',`${this.basePath}/api/v1/bal/cities`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get french first names
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFirstNames(observe?: 'body', reportProgress?: boolean): Observable<Array<FirstnameDTO>>;
    public getFirstNames(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<FirstnameDTO>>>;
    public getFirstNames(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<FirstnameDTO>>>;
    public getFirstNames(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<FirstnameDTO>>('get',`${this.basePath}/api/v1/bal/first-names`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get street names
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getStreetNames(observe?: 'body', reportProgress?: boolean): Observable<Array<StreetNameDTO>>;
    public getStreetNames(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<StreetNameDTO>>>;
    public getStreetNames(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<StreetNameDTO>>>;
    public getStreetNames(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<StreetNameDTO>>('get',`${this.basePath}/api/v1/bal/streets-names`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get streets
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getStreetsLight(observe?: 'body', reportProgress?: boolean): Observable<Array<CityStreetLightDTO>>;
    public getStreetsLight(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CityStreetLightDTO>>>;
    public getStreetsLight(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CityStreetLightDTO>>>;
    public getStreetsLight(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<CityStreetLightDTO>>('get',`${this.basePath}/api/v1/bal/streets`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get summary of OpenData BAL
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSummary(observe?: 'body', reportProgress?: boolean): Observable<BalSummaryDTO>;
    public getSummary(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BalSummaryDTO>>;
    public getSummary(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BalSummaryDTO>>;
    public getSummary(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<BalSummaryDTO>('get',`${this.basePath}/api/v1/bal/summary`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
